name: Generate Action


on:
  workflow_dispatch:

env:
  LIQUIBASE_VERSION: 4.32.0

jobs:
  create-command-list:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: create list
        run: make create-list VERSION=$LIQUIBASE_VERSION

      - id: set-matrix
        run: echo "matrix=$(cat commands.json)" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: commands-$LIQUIBASE_VERSION
          path: commands.json

  create-action-repo:
    env:
      TF_TOKEN_spacelift_io: ${{ secrets.SPACELIFT_API_KEY }}
      SPACELIFT_API_KEY_ENDPOINT: ${{ secrets.SPACELIFT_API_KEY_ENDPOINT }}
      SPACELIFT_API_KEY_ID: ${{ secrets.SPACELIFT_API_KEY_ID }}
      SPACELIFT_API_KEY_SECRET: ${{ secrets.SPACELIFT_API_KEY_SECRET }}
    runs-on: ubuntu-latest
    needs: [ create-command-list ]
    steps:
      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ secrets.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          permission-contents: read
          permission-workflows: write
          permission-issues: write

      - name: Set token in environment
        run: echo "TF_VAR_GITHUB_TOKEN=${{ steps.get-token.outputs.token }}" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: "1.9.0"
          
      - name: Install spacectl
        uses: spacelift-io/setup-spacectl@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v4
        with:
          name: commands-$LIQUIBASE_VERSION
          path: ./

      - name: OpenTofu Format
        id: fmt
        run: tofu fmt

      - name: OpenTofu Init
        id: init
        run: tofu init

      - name: OpenTofu Validate
        id: validate
        run: tofu validate -no-color

      - name: Preview infrastructure
        run: spacectl stack local-preview --id liquibase-github-actions --disregard-gitignore=true

      - name: Mount commands.json
        run: |
          spacectl stack environment mount --id liquibase-github-actions source/commands.json commands.json

      - name: Deploy infrastructure
        if: github.ref == 'refs/heads/main'
        env:
          SPACELIFT_API_KEY_ENDPOINT: ${{ secrets.SPACELIFT_API_KEY_ENDPOINT }}
          SPACELIFT_API_KEY_ID: ${{ secrets.SPACELIFT_API_KEY_ID }}
          SPACELIFT_API_KEY_SECRET: ${{ secrets.SPACELIFT_API_KEY_SECRET }}
        run: |
          spacectl stack set-current-commit --id liquibase-github-actions --sha ${{ github.sha }}
          spacectl stack deploy --id liquibase-github-actions --auto-confirm 

  generate-action:
    runs-on: ubuntu-latest
    needs: [ create-command-list, create-action-repo ]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        commands: ${{ fromJSON(needs.create-command-list.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - run: echo ${{ matrix.commands }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '3.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - run: make generate VERSION=$LIQUIBASE_VERSION COMMAND="${{ matrix.commands }}"

      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ secrets.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: liquibase-github-actions
          # permissions required to perform operations from push-to-repository.sh
          permission-contents: write # Required for git push, tag, clone 
          permission-issues: write # Required for creating issues

      - name: Configure git user
        run: |
          git config --global init.defaultBranch main
          git config --global user.name "liquibot"
          git config --global user.email "liquibot@liquibase.org"

      - name: Push Action to Repo
        run: ./scripts/push-to-repository.sh "${{ matrix.commands }}" $LIQUIBASE_VERSION
        env:
          GITHUB_TOKEN: ${{ steps.get-token.outputs.token }}

  output-action:
    runs-on: ubuntu-latest
    needs: [ generate-action ]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: commands-$LIQUIBASE_VERSION
          path: ./

      - name: Output Action Edit Link
        run: ./scripts/output-release-edit.sh "v$LIQUIBASE_VERSION"
